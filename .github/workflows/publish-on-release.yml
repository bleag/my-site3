name: Publish site on release

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set variables
        run: |
          echo "REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo "REPO_OWNER=${{ github.repository_owner }}" >> $GITHUB_ENV
          # tag name or release name
          echo "RELEASE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          if [ -z "${{ github.event.release.tag_name }}" ]; then
            echo "RELEASE_TAG=${{ github.event.release.name }}" >> $GITHUB_ENV
          fi
          echo "TARGET_DIR=v${{ github.event.release.tag_name }}" >> $GITHUB_ENV

      - name: Prepare site build (copy static files)
        run: |
          # If you have a build step (npm run build, hugo, etc.) run it here.
          # This example uses the repository root files as the site.
          SITE_DIR=$(pwd)
          echo "SITE_DIR=${SITE_DIR}"
          ls -la

      - name: Clone (or create) gh-pages branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          # clone gh-pages branch if exists, otherwise create orphan
          git clone --single-branch --branch gh-pages https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }} gh-pages ||           (git clone https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }} gh-pages && cd gh-pages && git checkout --orphan gh-pages)
          cd gh-pages
          git pull origin gh-pages || true

      - name: Copy site into versioned folder
        run: |
          cd gh-pages
          mkdir -p "v${{ github.event.release.tag_name }}"
          # Remove old content for this version and copy new files
          rm -rf "v${{ github.event.release.tag_name }}"/*
          cp -R ../ru ./v${{ github.event.release.tag_name }}/ru
          cp -R ../en ./v${{ github.event.release.tag_name }}/en
          cp ../index.html ./v${{ github.event.release.tag_name }}/index.html
          # optional: update a "latest" symlink-like folder by copying as 'latest'
          rm -rf latest
          mkdir -p latest
          cp -R ../ru ./latest/ru
          cp -R ../en ./latest/en
          cp ../index.html ./latest/index.html
          git status --porcelain
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Publish site for release ${{ github.event.release.tag_name }}"
            git push origin gh-pages
          fi

      - name: Done
        run: echo "Site published to gh-pages branch under /v${{ github.event.release.tag_name }}/"